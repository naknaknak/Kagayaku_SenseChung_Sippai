#14
이제 뭘 해야 하는가
사실 나도 잘 모름.

더 나가고 싶다면 알고리즘, 자료구조, 컴퓨터구조 이 정도를 들으면 좋을 듯.
대략적인 내용은 설명을 했지만 굳이 이것들을 학교서 듣지 않더라도 좋은 책, 좋은 사이트들 많다.
coursera나 스택 오버플로우, Soen(구 winapi)등이 있고, 이런 사이트 보고 하라는 거 하다 보면 어느 정도 감이 올 것이다.

컴파일에러나 액세스 바이올레이션보다는 로직에서 오는 버그가 훨씬 큰 위협이고, 그런 부분을 완전히 없앨 순 없겠지만
쌈박한 알고리즘을 생각했다! 고 하면 루프 몇번은 머릿속에서, 혹은 노트에 돌려볼 것.
배웠던 선형 자료구조(큐, 스택, 배열, 링크드 리스트)말고도 트리나 그래프 등도 컴퓨터로 표현할 수 있으므로 이쪽을 봐도 좋다.
솔직히 위에 쓴 기초과목이나 알고리즘같은 거만 봐도 지금까지 C++ 배웠던 것보다 더 많이 배워야 좀 감이 올 것.
어차피 취미로 할 때 제일 중요한 건 본인의 흥미이므로 본인이 매력적이라고 생각하는 분야에 쓰이는 기술을 찾아볼 것. ex)인공지능의 신경망 알고리즘 
내가 아는 분야는 대충 컴퓨터 그래픽스(중 물리, 충돌, 스키닝, 쉐이딩) ->모든 게 행렬곱으로 나타낼 수 있는 분야. 따라서 선형대수를 배우는 게 좋다.
같은 느낌으로 배울 때 덤으로 알면 좋은 수학 과목들이 같이 나오므로 이런 거랑 같이 배우면 더 재밌게 배울 수 있을 것.

언어적 지식이 필요하다면 산 책에 거의 다 써 있고, 정확히 이 언어에만 쓸 수 있는 방식을 찾고 싶다면 The C++ Programming Language류의 책을 찾아 보는 것도 좋음.
C도 어느 정도 다룰 수는 있을 것이므로 the c programming Language를 봐도 된다.
파이썬은 솔직히 잘 모르겠지만 다시 파이썬으로 가고 싶으면 지금까지 배웠던 것들을 역으로 파이썬에 집어넣을 수도 있을 것.
객체지향은 알고리즘 보면서 같이 해도 되겠지만 알고리즘을 먼저 보고 보는 걸 추천함. 뭐 할지 알아야 설계도 할 수 있을 것. 솔직히 나도 못한다.
