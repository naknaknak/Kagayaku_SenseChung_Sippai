1. 오리엔테이션

	-컴퓨터 구조. 폰 노이만 아키텍쳐
	 
 CPU가 메모리에서 명령어(Instruction)을 읽어서 한줄씩 실행하는 것이 현대 컴퓨터의 기본적 구조이다.
메인 메모리의 용량이 부족해서 하드 디스크라는 서브 메모리를 사용하고,
메인 메모리의 속도가 부족해서 CPU가 캐시를 가지고 있다.
여기서 모든 명령어와 자료는 메인 메모리에 올라와 있어야 하며, 이런 구조를 처음 생각해낸 것이
폰 노이만이기 때문에 폰 노이만 아키텍쳐라 부른다.

	-프로그래밍 언어

 언어는 기계어가 있어요
기계어 한번 써보면 알겠지만 사람이 쓸 만한 언어는 아니기 때문에(쓴 미친놈들도 있음)
약간 인간이 쓰는 언어에 가까운 어셈블리어가 생김.
언어가 인간이 쓰는 언어에 가까울수록 고오급 언어, 멀수록 하급언어라고 한다.

C는 고급과 하급의 중간적인 언어임.
C++은 C에 객체지향을 스까서 만든 언어.
JAVA는 C++을 좀 더 편하게 쓰려고 만든 언어.
PHP? 그건 뭐죠?

Low-High 분류 말고 Interpreter를 가지는 언어나 함수기반 언어 등 여러가지 분류가 있다.
인터프리터는 명령어 한줄씩 치면 프로그램이 대답해주는 언어. 매트랩 써봤으면 알수도 있다.
함수 기반 언어는 LISP같은 것들. 전부 함수고 루프가 없다! 디버깅할때 미칠지경이라고 함. 나는 안써봤음.

다른 공학들과 마찬가지로 알고리즘 같은 것들은 거의 5~60년대에 만들어졌기 때문에
지금와서 70?80?년대에 만들어진 객체지향이란 개념을 주창하는 건 자연스러워 보인다.

	-객체지향

 컴퓨터 과학은 데이터를 얼마나 효율적으로 다룰 수 있을까를 생각하는 학문이다.
결국 모든 프로그램은 입력인 A를 원하는 자료인 B로 만드는 게 목적인 것이다.
그래서 자기가 스스로 자료를 갖고, 그 자료에 걸맞는 연산을 할 수 있는 행동들을 가지고 있다는 개념인
객체라는 걸 만들게 되었다.
그리고 실수를 방지하고 내부의 변화가 외부에 영향을 미치지 못하게 하기 위한 캡슐화,
상속을 통해 같은 함수라도 컴파일 타임에 다르게 배정할 수 있는 다형성, 
갖고있는 데이터가 적어서 범위가 큰 상위분류 객체가 하위분류 객체를 포함하는 상속을 구현하게 된다.
뭐가 좋은지는 해봐도 모른다.

	-컴퓨터과학의 세부 분류
 우리친구 알고리즘, 자료구조 있고 컴퓨터구조 있고. 기계학습이니 운영체제니 인공지능이니
다 컴퓨터과학이다. 컴과 오세요 두번오세요.

	-근데 C++이 뭐가 좋죠?

 줘까튼 부분 극복하면 좋음. 타입도 내가 다 골라야되지 툭하면 폭발하지... 하지만 성능은 보장한다.
개나소나 프로그래밍 입문하면 C배우기 때문에 익숙해보이는 언어라는 점도 한몫함.
뭐든지 할 수 있고 성능까지 좋은 C++...크으...C++뽕에 취한다...

