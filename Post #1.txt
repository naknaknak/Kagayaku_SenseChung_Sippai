얘기하면서 추가된 내용(#넘버링 붙은 파일에 없는 내용), 설명할라다가 만 내용 혹은 틀린거, 숙제 내용, 숙제에 대한 지적사항이나 설명을 Post에 추가할 예정. 이름을 바꿔서 다시 푸시해도 상관없고 그렇게 하면 다음부터는 이름을 맞춰줄거다.

- 프로그래밍 언어
 딱딱 무슨형이다 무슨형이다 써 놓긴 했는데 그런 식으로 구분할 수는 없는 것 같다. 공유하는 특성( ex)객체지향을 지원한다) 이 있는 언어를 묶어서 분류하는 건 가능할듯. 영문위키의 comparison of programming항목을 참조하시라.

-캐싱과 버퍼링
 이상하게 면접에서 전혀 다른 건데 물어보는 사람이 있어서 헷갈리지 말라고 써봄. 캐싱은 설명했던 것처럼 속도가 빠르고 용량이 작은 장치와 느리고 용량이 큰 장치가 있으면 중간에 중간 속도, 중간 용량 장치를 넣어서 속도차이-보통 병목현상이라고 함- 를 해결하는 방식이다. 모두 데이터를 저장한다는 것 딱 하나만 버퍼링과 유사하다.
 버퍼링은 어딘가에서 자료를 받는데 그 자료의 크기를 정확히 모를 때 쓰는 방식이다. 메모리 할당에 대해선 변수란에서 설명하겠지만 작은 크기의 자료를 불연속적으로 처리해야 할 때 자료가 들어올 때마다 메모리를 새로 할당하게 된다면 매우 큰 오버헤드가 발생하므로 미리 예상되는 자료 크기보다 큰 메모리를 할당해 놓고 거기에 들어오는 자료를 채워넣어서 나중에 한꺼번에 꺼내서 쓰는 방식이다. 캐시와 결정적인 차이점은 내가 받을 자료를 결정할 수 없다는 점이다. 캐시는 받을 자료를 캐시가 정해서 받음.

- 객체
 객체는 데이터와 그 데이터를 처리하는 함수를 추상화한 것이다. 추상화라는 건 형식에 맞는 데이터면 아무거나 받아서 처리할 수 있다는 뜻이다. 객체를 실제로 사용하기 위해 메모리에 만들면 그 객체의 데이터와 함수에 접근할 수 있게 되고 이런 상태의 객체를 인스턴스라고 부른다.

-모듈
실행가능한 프로그램 한 덩어리를 모듈이라고 한다. 객체와는 전혀 다른 개념이다. 데이터 A가 있다고 하자. 내가 데이터를 B로 바꾸고 싶다. 이게 프로그램의 최종 목적이다. 하지만 A를 B로 바꾸는 프로그램을 딱 하나 작성하면 너무 프로그램 크기가 커져서 제대로 디버깅을 하기가 힘들다. 그래서 그 프로그램을 A->C C->B하는 프로그램 두 가지로 나눈다고 하면 그럼 그 두 가지 각각이 모튤이 된다. 모듈은 함수일 수도 있고 이미 컴파일이 끝난 프로그램 EXE일 수도 있다.



숙제

std::cin, std::cout을 사용해보자.

다음 나갈 챕터는 456장이다. 미리 보고싶으면 좀 봐도 좋다. 예제코드를 일단 받아서 실행할 수 있는 상태로 만들자.